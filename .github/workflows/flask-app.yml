name: Flask App CI/CD

on:
  push:
    branches:
      - main

jobs:
  security-check:
    name: Security (Trivy + Gitleaks)
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation 
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy
    - name: Trivy Filesystem Scan
      run: trivy fs --format table -o fsreport.json .
      
    # gitleaks scan is a tool that is used to find if there is any kind of sensitive data hardcoded i.e., API tokens, secret access tokens
    - name: Gitleaks Install
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json
  
  build-and-sonar-scan:
    runs-on: self-hosted
    needs: security-check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest

      - uses: actions/checkout@v4
        with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  deploy:
    runs-on: self-hosted
    needs: build-and-sonar-scan
    
    steps:
      - name: Pull latest image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest

      - name: Stop old containers
        run: docker compose down || true

      - name: Start containers
        run: docker compose up -d
        
  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: deploy
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f storageclass.yaml
        kubectl apply -f mysql-pv.yaml
        kubectl apply -f mysql-deployment.yaml
        kubectl apply -f mysql-service.yaml
        kubectl apply -f flask-app-deployment.yaml
        kubectl apply -f flask-service.yaml
